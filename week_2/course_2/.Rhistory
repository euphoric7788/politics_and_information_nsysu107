print(paste("Your bmi: ", my.bmi))
print("正常範圍")
} else {
print(paste("Your bmi: ", my.bmi))
print("過輕!")
}
course.student.number <- c(1:30)
rm(list=ls())
course.student.number <- c(1:30)
csn <- length(course.student.number)
course.student.grade <- sample(x=c(55:100), size=csn)
names(course.student.grade) <- course.student.number
course.student.grade <- sample(x=c(55:100), size=csn)
names(course.student.grade) <- course.student.number
course.student.grade
course.student.grade <- sample(x=c(55:100), size=csn)
course.student.grade
names(course.student.grade) <- course.student.number
course.student.grade
csg.mean <- mean(course.student.grade)
course.student.number <- c(1:30)
csn <- length(course.student.number)
course.student.grade <- sample(x=c(55:100), size=csn)
names(course.student.grade) <- course.student.number
csg.mean <- mean(course.student.grade)
csg.max <- max(course.student.grade)
csg.min <- min(course.student.grade)
csg.over.80 <- course.student.grade >= 80
csg.over.80 <- course.student.grade >= csg.mean
course.student.grade[csg.over.80]
rm(list = ls())
course.student.number <- c(1:30)
csn <- length(course.student.number)
course.student.grade <- sample(x=c(55:100), size=csn)
names(course.student.grade) <- course.student.number
csg.mean <- mean(course.student.grade)
csg.max <- max(course.student.grade)
csg.min <- min(course.student.grade)
csg.over.80 <- course.student.grade >= 80
csg.over.80
course.student.grade[csg.over.80]
print(paste("全班人數:", csn))
print(paste("全班平均：", csg.mean))
print(paste("全班最高：", csg.max))
print(paste("全班最低：", csg.min))
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80]))))
print(paste("高於80分總人數：", length(course.student.grade[csg.over.80])))
print(paste("高於80分座號：", names(course.student.grade[csg.over.80])))
rm(list=ls())
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
person.df <- data.frame(person.name, person.sex, person.id, person.days)
str(person.df)
summary(person.df)
person.df
person.df[1, ]
person.df[2, 3]
person.df$person.id
days.postion <- order(person.df$person.days)
person.df[days.postion, ]
spirit.520 <- grepl("520", person.df$person.id)
person.df[spirit.520, ]
SayHello <- function (name) {
print(paste("Hello,", name))
}
SayHello("Kevin") # Output > "Hello, Pecu"
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / my.height.m ^ 2
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55) # return 16.97531
GetBmi(180, 55) # return 16.97531
GetBmi(166, 56)
GetBmi(180, 55) # return 16.97531
GetBmi(166, 56)
rm(list=ls())
SayHello <- function (name) {
print(paste("Hello,", name))
}
SayHello("Kevin") # Output > "Hello, Pecu"
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / my.height.m ^ 2
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55) # return 16.97531
GetBmi(166, 56)
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg # "Your bmi:  22.5981404958678 , 正常範圍"
bmi.level.msg <- CheckBmiLevel(166, 56)
bmi.level.msg # "Your bmi:  22.5981404958678 , 正常範圍"
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / my.height.m ^ 2
# Return my.bmi
return (my.bmi)
}
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
setwd('../week_2')
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
getwd()
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
getwd()
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
getwd()
setwd('course_2')
getwd()
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
dim(df)
head(df)
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
dim(df)
head(df)
tail(df)
summary(df)
str(df)
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
df <- cbind(df, Height, Weight)
df <- rbind(df, Kobe)
str(df)
df <- cbind(df, Height, Weight)
df <- rbind(df, Kobe)
rm(list=())
rm(list=ls())
GetBmi <- function (my.height.cm, my.weight.kg) {
my.height.m <- my.height.cm / 100
my.bmi <- my.weight.kg / (my.height.m) ^ 2
return (my.bmi)
}
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
dim(df)
head(df)
tail(df)
summary(df)
str(df)
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
df <- cbind(df, Height, Weight)
df <- rbind(df, Kobe)
str(df)
df
rownames(a)=='a'
df[rownames(Name)=='Kobe']
df[rownames(df)=='Kobe']
rownames(df)=='Kobe'
df[rownames(df)=='11']
rownames(df)=='Kobe'
rownames(df)
rownames(df[1])
rownames(df[2])
df
df[rownames(df$Name)=='Kobe']
rownames(df$Name)=='Kobe'
rownames(df$Name)=='Kobe'
df$Grade[df$Name=='Kobe'] <- 990
df
df$Grade[df$Name=='Kobe'] <- 990
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
str(df)
df <- df[order(df$Grade, decreasing = T), ]
rm(list=ls())
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / my.height.m ^ 2
# Return my.bmi
return (my.bmi)
}
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
dim(df)
head(df)
tail(df)
summary(df)
str(df)
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
df <- cbind(df, Height, Weight)
df <- rbind(df, Kobe)
str(df)
df$Grade[df$Name=='Kobe'] <- 990
view(df)
df
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
str(df)
df <- df[order(df$Grade, decreasing = T), ]
df
df <- subset(df, select = c(-Age))
names(df)[df$Grade] <- "ToeicGrade"
df$Grade
4
names(df)[4]
names(df)[df$Grade]
names(df$Grade)
names(df)
names(df)["Grade"]
names(df)[Grade]
names(df)[df$Grade]
names(df)[df]
names(df)[4] <- "ToeicGrade"
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
df[df$School == 'A', ]
df$Grade=="Grade"
names(df$ToeicGrade) <- "Test"
df
View(df)
View(df)
names(df$ToeicGrade)
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm/100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / my.height.m ^ 2
# Return my.bmi
return (my.bmi)
}
df <- read.table('test_data.csv', sep = ',', header = T, stringsAsFactors = F)
dim(df)
head(df)
tail(df)
summary(df)
str(df)
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
df <- cbind(df, Height, Weight)
df <- rbind(df, Kobe)
str(df)
df$Grade[df$Name=='Kobe'] <- 990
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
str(df)
df <- df[order(df$Grade, decreasing = T), ]
df <- subset(df, select = c(-Age))
names(df)[4] <- "ToeicGrade"
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
df[df$School == 'A', ]
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
df$Bmi <- mapply(GetBmi, df$Height, df$Weight)
df <- merge(df, df.sport, by = 'Name', all.x = T)
View(df)
rm(list=ls())
library(httr)
install.packages("httr")
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
library(httr)
url <- "https://api.kivaws.org/v1/loans/2930.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
library(httr)
url <- "https://api.kivaws.org/v1/lenders/matt.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$prods)
View(data.frame(do.call(rbind,res_json$prods)))
rm(list=ls())
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$lenders)
url <- "https://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$teams)
View(data.frame(do.call(rbind,res_json$prods)))
View(data.frame(do.call(rbind,res_json$teams)))
iris
dim(iris)
head(iris)
tail(iris)
str(iris)
summary(iris)
for(a in c(1:9)){
for(b in c(1:9)){
print(paste(a,"*",b,"=",a*b))
}
}
nums <- sample(x=10:100, size=10)
nums
for (num in nums) {
if (num == 66) {
print("太66666666666了")
break
} else if ((num %% 2 == 0) && (num > 50)) {
print(paste("偶數且大於50：", num))
}
}
year <- 2100
ifelse(year %% 4 == 0 && year %% 100 != 0 || year %% 400 == 0, "是閏年", "不是閏年")
ans <- sample(0:9, 4)
guess.count <- 0
repeat {
print("Please input 4 non-repetitive numbers.[integers between 0 to 9, aka c(0:9)")
guess <- scan(nmax = 4)
a <- b <- 0
if (!any(duplicated(guess))){
guess.count <- guess.count + 1
for (i in 1:4) {
if (guess[i] == ans[i]) {
a <- a + 1
} else {
for (j in 1:4) {
if (guess[i] == ans[j]) {
b <- b + 1
}
}
}
}
cat("==== Your guess :", guess, ", Match : ", a, "A", b, "B\n")
if (a == 4) {
cat("==== CORRECT! You guess for", guess.count, "times")
break
}
} else {
cat("==== Input Error: Please input 4 <non-repetitive> numbers.\n")
}
}
rm(list=ls())
ans <- sample(0:9, 4)
guess.count <- 0
repeat {
# Hint message
print("Please input 4 non-repetitive numbers.[integers between 0 to 9, aka c(0:9)")
# Scan for input
guess <- scan(nmax = 4)
# The matchs hint, correct-a and correct-b
a <- b <- 0
# Check if the guess has duplicated numbers.
if (!any(duplicated(guess))){
# Guessing time plus 1
guess.count <- guess.count + 1
for (i in 1:4) {
# Check for correct-a
if (guess[i] == ans[i]) {
a <- a + 1
} else {
# Check for correct-b
for (j in 1:4) {
if (guess[i] == ans[j]) {
b <- b + 1
}
}
}
}
# Hint message
cat("==== Your guess :", guess, ", Match : ", a, "A", b, "B\n")
# Game over situation
if (a == 4) {
cat("==== CORRECT! You guess for", guess.count, "times")
break
}
} else {
# The guess has duplicated numbers.
cat("==== Input Error: Please input 4 <non-repetitive> numbers.\n")
}
}
ans <- sample(0:9, 4)
guess.count <- 0
repeat {
print("Please input 4 non-repetitive numbers.[integers between 0 to 9, aka c(0:9)")
guess <- scan(nmax = 4)
a <- b <- 0
if (!any(duplicated(guess))){
guess.count <- guess.count + 1
for (i in 1:4) {
if (guess[i] == ans[i]) {
a <- a + 1
} else {
for (j in 1:4) {
if (guess[i] == ans[j]) {
b <- b + 1
}
}
}
}
cat("==== Your guess :", guess, ", Match : ", a, "A", b, "B\n")
if (a == 4) {
cat("==== CORRECT! You guess for", guess.count, "times")
break
}
} else {
cat("==== Input Error: Please input 4 <non-repetitive> numbers.\n")
}
}
rm(list=ls())
person.name <- c("Jiyuian", "Shawnroom", "Bigmoumou")
person.sex <- c("F", "M", "M")
person.id <- c("jiyuian520", "shawnn520", "moumou123")
person.days <- c(201, 37, 99)
person.df <- data.frame(person.name, person.sex, person.id, person.days)
str(person.df)
summary(person.df)
person.df
person.df[1, ]
person.df[1, ]
person.df[1]
person.df[, 1]
person.df[1]
person.df[2, 3]
person.df$person.id
days.postion <- order(person.df$person.days)
person.df[days.postion, ]
spirit.520 <- grepl("520", person.df$person.id)
person.df[1, ]
person.df[2, 3]
person.df$person.id
days.postion <- order(person.df$person.days)
person.df[days.postion, ]
spirit.520 <- grepl("520", person.df$person.id)
person.df[spirit.520, ]
person.df$person.id
View(person.df)
rm(list=ls())
library(httr)
url <- "https://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$teams)
View(data.frame(do.call(rbind,res_json$teams)))
library(httr)
url <- "https://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
do.call(rbind,res_json$teams)
View(data.frame(do.call(rbind,res_json$teams)))
install.packages("rmarkdown")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
kable(raw)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
url <- "http://ecshweb.pchome.com.tw/search/v3.3/all/results?q=sony&page=1&sort=rnk/dc"
res = GET(url)
res_json = content(res)
raw = (data.frame(do.call(rbind,res_json$prods)))
library(knitr)
kable(raw)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(httr)
url <- "https://api.kivaws.org/v1/lenders/jeremy/teams.json"
res = GET(url)
res_json = content(res)
raw = (data.frame(do.call(rbind,res_json$teams)))
library(knitr)
kable(raw)
